---
import ThemeIcon from "./ThemeIcon.astro";
import LinkCode from "@components/Typography/LinkCode.astro";

interface IMenu {
  label: string;
  href: string;
  external?: boolean;
  badge?: string;
}
const leftmenu: IMenu[] = [
  {
    label: "About",
    href: "/#about",
  },
  {
    label: "Guess Game",
    href: "/NumberGuessingGame",
  },
  {
    label: "Education",
    href: "#education",
  },
];

const rightmenu: IMenu[] = [
  {
    label: "Experience",
    href: "#exp",
  },
  {
    label: "Projects",
    href: "/projects",
  },
  {
    label: "Resume",
    href: "/resume",
    // external: true,
    // badge: "new",
  },
  // {
  //   label: 'Travel',
  //   href: '/travel',
  // },
];
const mobilemenu: IMenu[] = [...leftmenu, ...rightmenu];
---

<nav
  role="navigation"
  class="px-5 py-2 shadow-md sticky top-0 z-50 w-full mx-auto rounded-lg navbar font-extrabold">
  <div class="flex flex-wrap justify-between md:gap-10 md:flex-nowrap">
    <!-- LEFT MENU -->
    <div
      class="flex-col items-center justify-start order-1 hidden w-full md:flex md:flex-row md:justify-end md:w-auto md:order-none md:flex-1">
      {
        leftmenu.map((item) => (
          <LinkCode
            url={item.href}
            content={item.label}
            classItems={" nav__link px-2 lg:px-5 py-2 md:text-sm"}
          />
        ))
      }
    </div>
    <!-- LOGO & MENU ICON -->
    <div class="flex w-full justify-around">
      <div class="md:hidden">
        <ThemeIcon />
      </div>

      <a id="smallLogo" class="w-32 mx-auto" href="/">
        <!-- <img src={bigLogo} alt=' Logo' /> -->
        <img
          src="/images/logo_profiles/maria-art.png"
          alt="logo"
          class="w-8 md:w-12 h-auto mx-auto"
        />
      </a>

      <button
        id="menu"
        aria-label="Toggle Menu"
        class="md:hidden text-primary-text dark:text-secondary-text rounded-md focus:outline-none">
        <svg
          class="w-8 h-8 fill-current"
          xmlns="http://www.w3.org/2000/svg"
          viewBox="0 0 24 24">
          <path
            class="navmenu-toggle"
            fill-rule="evenodd"
            d="M4 5h16a1 1 0 0 1 0 2H4a1 1 0 1 1 0-2zm0 6h16a1 1 0 0 1 0 2H4a1 1 0 0 1 0-2zm0 6h16a1 1 0 0 1 0 2H4a1 1 0 0 1 0-2z"
          ></path>

          <path
            class="navmenu-toggle hidden"
            fill-rule="evenodd"
            clip-rule="evenodd"
            d="M18.278 16.864a1 1 0 0 1-1.414 1.414l-4.829-4.828-4.828 4.828a1 1 0 0 1-1.414-1.414l4.828-4.829-4.828-4.828a1 1 0 0 1 1.414-1.414l4.829 4.828 4.828-4.828a1 1 0 1 1 1.414 1.414l-4.828 4.829 4.828 4.828z"
          ></path>
        </svg>
      </button>
    </div>

    <!-- RIGHT MENU -->
    <div
      class="flex-col items-center justify-start order-2 hidden w-full md:flex md:flex-row md:w-auto md:flex-1 md:order-none">
      {
        rightmenu.map((item) => (
          <LinkCode
            url={item.href}
            content={item.label}
            classItems="nav__link px-2 lg:px-5 py-2 md:text-sm"
          />
        ))
      }
      <ThemeIcon class="hidden md:inline-flex" />
    </div>
  </div>
  <!-- PHONE MENU -->
  <div class="navmenu-toggle hidden">
    <div
      class="flex flex-col items-center justify-start order-2 w-full md:hidden">
      {
        mobilemenu.map((item) => (
          <LinkCode
            url={item.href}
            content={item.label}
            classItems="px-5 py-2"
          />
        ))
      }
    </div>
  </div>
</nav>

<style is:inline>
  .nav-active {
    padding: 0.5rem;
    /* transition: all 0.4s cubic-bezier(0.8, 0, 1, 1); */
  }
  nav {
    padding: 1.2rem;
    transition: all 0.4s cubic-bezier(0, 0, 0.2, 1);
  }
</style>

<script is:inline>
  const menuButton = document.getElementById("menu");
  // const smallLogo = document.getElementById("smallLogo");
  // const bigLogo = document.getElementById("bigLogo");
  const navbar = document.querySelector(".navbar");
  const htmlElement = document.documentElement;
  menuButton.addEventListener("click", () => {
    [...document.querySelectorAll(".navmenu-toggle")].forEach((Element) => {
      Element.classList.toggle("hidden");
    });
  });

  const updateScrollAttribute = () => {
    const scrollTop = htmlElement.scrollTop || document.body.scrollTop;
    if (scrollTop > 0) {
      htmlElement.setAttribute("data-scroll", "1");
      navbar.classList.add(
        "shadow-lg",
        "bg-primary-light",
        "dark:bg-secondary",
        "nav-active"
      );
      navbar.classList.remove("shadow-md");
      // bigLogo.classList.remove("hidden");
      // smallLogo.classList.add("hidden");
    } else {
      htmlElement.setAttribute("data-scroll", "0");
      navbar.classList.remove(
        "shadow-lg",
        "bg-primary-light",
        "dark:bg-secondary",
        "nav-active"
      );
      navbar.classList.add("shadow-md");

      // bigLogo.classList.add("hidden");
      // smallLogo.classList.remove("hidden");
    }
  };
  // Attach scroll event listener
  window.addEventListener("scroll", updateScrollAttribute);
  // Initial call to update the scroll attribute on page load
  updateScrollAttribute();
</script>
